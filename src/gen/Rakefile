#
# Copyright (c) 2010 Andrea Fazzi
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'rake/clean'
require 'erb'

CLOBBER << 'z80.go' << 'z80_base_cb_ddfd_ed.go.erb'

file "z80_base.go.erb" => ["opcodes_base.dat", "z80.pl", "z80.go.erb"] do
  template = ERB.new(File.read('z80.go.erb'))
  opcodes = `./z80.pl opcodes_base.dat`
  puts "Write z80_base.go.erb"
  File.open("z80_base.go.erb", 'w') { |f| f << template.result(binding) } 
end

file "z80_base_cb_ddfd_ed.go.erb" => ["opcodes_cb.dat", "opcodes_ddfd.dat", "opcodes_ed.dat", "z80_base.go.erb"] do
  template = ERB.new(File.read('z80_base.go.erb'))
  opcodes_cb = `./z80.pl opcodes_cb.dat`
  opcodes_ddfdcb = `./z80.pl opcodes_ddfdcb.dat`
  opcodes_ddfd = `./z80.pl opcodes_ddfd.dat`
  opcodes_ed = `./z80.pl opcodes_ed.dat`
  puts "Write z80_base_cb_ddfd_ed.go.erb"
  File.open("z80_base_cb_ddfd_ed.go.erb", 'w') { |f| f << template.result(binding) } 
end

file "z80.go" => ["opcodes_cb.dat", "opcodes_ddfdcb.dat", "opcodes_ddfd.dat", "opcodes_ed.dat", "z80_base_cb_ddfd_ed.go.erb"] do
  template = ERB.new(File.read("z80_base_cb_ddfd_ed.go.erb"))
  opcodes_ddfdcb = `./z80.pl opcodes_ddfdcb.dat`
  puts "Write z80.go"
  File.open("z80.go", 'w') { |f| f << template.result(binding) } 
end

task :format => "z80.go" do
  `gofmt -w z80.go`
end

task :copy_z80 => :format do
  cp "z80.go", "../spectrum/"
  Dir.chdir("../spectrum") do
    sh "make && gotest"
  end
end

task :default => :format
